import ta_thehive_cortex_declare

import os
import sys
import time
import datetime
import json

import modinput_wrapper.base_modinput
from splunklib import modularinput as smi


import input_module_backfill_observables as input_module

bin_dir = os.path.basename(__file__)

"""
    Do not edit this file!!!
    This file is generated by Add-on builder automatically.
    Add your modular input logic to file input_module_backfill_observables.py
"""


class ModInputbackfill_observables(modinput_wrapper.base_modinput.BaseModInput):

    def __init__(self):
        if "use_single_instance_mode" in dir(input_module):
            use_single_instance = input_module.use_single_instance_mode()
        else:
            use_single_instance = False
        super(ModInputbackfill_observables, self).__init__(
            "ta_thehive_cortex", "backfill_observables", use_single_instance
        )
        self.global_checkbox_fields = None

    def get_scheme(self):
        """overloaded splunklib modularinput method"""
        scheme = super(ModInputbackfill_observables, self).get_scheme()
        scheme.title = "TheHive: Observables"
        scheme.description = "Go to the add-on's configuration UI and configure modular inputs under the Inputs menu."
        scheme.use_external_validation = True
        scheme.streaming_mode_xml = True

        scheme.add_argument(
            smi.Argument("name", title="Name", description="", required_on_create=True)
        )

        """
        For customized inputs, hard code the arguments here to hide argument detail from users.
        For other input types, arguments should be get from input_module. Defining new input types could be easier.
        """
        scheme.add_argument(
            smi.Argument(
                "instance_id",
                title="Instance ID",
                description='Indicate which instance to use (Set the "id" provided under "Instances"). You can use "<default>" to set automatically the ID to the default set parameter in the configuration page.',
                required_on_create=True,
                required_on_edit=False,
            )
        )
        scheme.add_argument(
            smi.Argument(
                "date",
                title="Date",
                description="Indicates if you want to recover your logs based on the last created or updated date",
                required_on_create=True,
                required_on_edit=False,
            )
        )
        scheme.add_argument(
            smi.Argument(
                "max_size_value",
                title="Max size for values",
                description="Indicates what is the maximum size/length for the values (will be truncated after this value)",
                required_on_create=False,
                required_on_edit=False,
            )
        )
        scheme.add_argument(
            smi.Argument(
                "fields_removal",
                title="Fields removal",
                description="Indicates a list of fields, separated by a comma, representing the path in the dictionnary (such as 'field1.subfield1') that should be removed from the original event",
                required_on_create=False,
                required_on_edit=False,
            )
        )
        scheme.add_argument(
            smi.Argument(
                "backfill_start",
                title="Backfill: Start date",
                description="Indicates which timestamp in seconds should be used as the start date for the first call",
                required_on_create=True,
                required_on_edit=True,
            )
        )
        scheme.add_argument(
            smi.Argument(
                "backfill_end",
                title="Backfill: End date",
                description="Indicates which timestamp in seconds should be used as the end date (no more log collection will be performed after this date is reached)",
                required_on_create=True,
                required_on_edit=True,
            )
        )
        return scheme

    def get_app_name(self):
        return "TA-thehive-cortex"

    def validate_input(self, definition):
        """validate the input stanza"""
        input_module.validate_input(self, definition)

    def collect_events(self, ew):
        """write out the events"""
        input_module.collect_events(self, ew)

    def get_account_fields(self):
        account_fields = []
        return account_fields

    def get_checkbox_fields(self):
        checkbox_fields = []
        return checkbox_fields

    def get_global_checkbox_fields(self):
        if self.global_checkbox_fields is None:
            checkbox_name_file = os.path.join(bin_dir, "global_checkbox_param.json")
            try:
                if os.path.isfile(checkbox_name_file):
                    with open(checkbox_name_file, "r") as fp:
                        self.global_checkbox_fields = json.load(fp)
                else:
                    self.global_checkbox_fields = []
            except Exception as e:
                self.log_error(
                    "Get exception when loading global checkbox parameter names. "
                    + str(e)
                )
                self.global_checkbox_fields = []
        return self.global_checkbox_fields


if __name__ == "__main__":
    exitcode = ModInputbackfill_observables().run(sys.argv)
    sys.exit(exitcode)
